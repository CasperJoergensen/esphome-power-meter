# Power Meter v0.9.5
#
# Power Meter with Cost Tracking.
#
# ​ Sic biscuitus disintegratum ​

substitutions:
  pulse_rate: '1000.0'
  currency: 'DKK'
  pulse_pin: '26'
  led_pin: '17'
  ha_price_default: '2'
  ha_price_sensor: 'nordpool_kwh_dk2_dkk_4_095_025'
  update_interval: '60s'
  internal_interval: '30'
  flag_update_sensors: '1'
  flag_reset_monthly: '8'
  flag_reset_daily: '16'
  flag_reset_total: '128'
  flag_reset_mask: '248'

# substitutions:
#          pulse_rate: Pulse Rate of the LED on your power-panel-meter
#            currency: Currency in which to represent costs
#           pulse_pin: GPIO pin for the pulse_meter
#             led_pin: GPIO pin for the LED
#     ha_price_sensor: entity_id of the sensor used in Home Assistant to track spot prices.
#     update_interval: Seconds (ticks in 1s interval loop) between updating sensors.
#
# Note: The flag* substitutions are instead of #defines.

esphome:
  name: power-meter
  friendly_name: 'Power Meter'
  comment: 'Power Meter with Cost Tracking'
  project:
    name: zenzay.power_meter
    version: '0.9.5'

preferences:
  flash_write_interval: 1h

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

logger:

api:

ota:
  password: !secret ota_password_power_meter

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

globals:
  - id: usage_total         # total kwh usage
    type: float
    restore_value: yes
    initial_value: '0'

  - id: usage_month         # monthly kwh usage
    type: float
    restore_value: yes
    initial_value: '0'

  - id: usage_day           # daily kwh usage
    type: float
    restore_value: yes
    initial_value: '0'

  - id: cost_total          # total cost
    type: float
    restore_value: yes
    initial_value: '0'

  - id: cost_month          # monthly cost
    type: float
    restore_value: yes
    initial_value: '0'

  - id: cost_day            # daily cost
    type: float
    restore_value: yes
    initial_value: '0'

  - id: uptime_days         # uptime day counter
    type: float
    restore_value: yes
    initial_value: '0'

  - id: cost_now            # hourly cost right now
    type: float
    restore_value: no
    initial_value: '0'

  - id: price_per_kwh       # price per kwh, should be automatically imported from HA, but can also be set manually
    type: float
    restore_value: no
    initial_value: '0'

  - id: price_kwh_avg       # average kwh price. Will be used if 'Use KwH Price Average' switch is set.
    type: float
    restore_value: yes
    initial_value: '0'

  - id: usage_day_avg
    type: float
    restore_value: yes
    initial_value: '0'

  - id: cost_day_avg
    type: float
    restore_value: yes
    initial_value: '0'

  - id: uptime_start        # uptime start timestamp
    type: int
    restore_value: no
    initial_value: '0'

  - id: op_flag             # bitmask for operational flags
    type: int
    restore_value: no
    initial_value: '0'

number:
  - platform: template
    id: pulse_rate
    name: 'Set Pulse Rate'
    unit_of_measurement: 'Pulse/kWh'
    icon: mdi:pulse
    optimistic: true
    mode: box
    min_value: 100
    max_value: 10000
    step: 100
    initial_value: 1000
    restore_value: true
    entity_category: 'config'

  - platform: template
    name: 'Set Total Usage'
    unit_of_measurement: 'kWh'
    icon: mdi:meter-electric
    optimistic: true
    mode: box
    min_value: 0
    max_value: 100000
    step: 0.001
    initial_value: 0
    disabled_by_default: true
    entity_category: 'config'
    on_value:
      lambda: id(usage_total) = x;

  - platform: template
    name: 'Set Total Cost'
    unit_of_measurement: $currency
    icon: mdi:cash-100
    optimistic: true
    mode: box
    min_value: 0
    max_value: 100000
    step: 0.001
    initial_value: 0
    disabled_by_default: true
    entity_category: 'config'
    on_value:
      lambda: id(cost_total) = x;

  - platform: template
    name: 'Set Uptime'
    unit_of_measurement: 'days'
    icon: mdi:timelapse
    optimistic: true
    mode: box
    min_value: 0
    max_value: 365
    step: 0.01
    initial_value: 0
    disabled_by_default: true
    entity_category: 'config'
    on_value:
      lambda: |-
        id(uptime_start) = 0;
        id(uptime_days) = x;
        //id(uptime_secs) = ceil(x * 60.0f * 60.0f * 24.0f);

  - platform: template
    name: 'Set kWh Price'
    icon: mdi:cash-100
    unit_of_measurement: '${currency}/kWh'
    optimistic: true
    mode: box
    min_value: 0
    max_value: 100
    step: 0.001
    initial_value: $ha_price_default
    disabled_by_default: true
    entity_category: 'config'
    on_value:
      lambda: |-
        id(price_per_kwh) = x;
        id(update_price_kwh_avg).execute();

  - platform: template
    id: power_problem_level
    name: 'Set Problem Level'
    icon: mdi:alert
    unit_of_measurement: 'W'
    optimistic: true
    mode: box
    min_value: 10
    max_value: 100000
    step: 1
    initial_value: 10000
    entity_category: 'config'

light:
  - platform: neopixelbus
    variant: WS2812
    pin: $led_pin
    num_leds: 1
    type: GRB
    name: 'Power LED'
    id: power_led
    default_transition_length: 0.1s
    color_correct: [50%, 50%, 50%]
    restore_mode: ALWAYS_OFF
    entity_category: 'config'

switch:
  - platform: template
    name: "Use kWh Price Average"
    id: use_kwh_price_average
    icon: "mdi:toggle-switch-outline"
    optimistic: True
    entity_category: 'config'
    turn_on_action:
      - lambda: |-
          id(op_flag) |= $flag_update_sensors;
    turn_off_action:
      - lambda: |-
          id(op_flag) |= $flag_update_sensors;

button:
  - platform: template
    name: 'Reset Totals'
    device_class: restart
    entity_category: 'config'
    on_press:
      lambda: id(op_flag) = $flag_reset_mask;

  - platform: template
    name: 'Reset kWh Price Average'
    entity_category: 'config'
    on_press:
      lambda: |-
        id(price_kwh_avg) = 0;
        id(update_price_kwh_avg).execute();

  - platform: template
    name: 'Sync Monthly to Total'
    disabled_by_default: true
    entity_category: 'config'
    on_press:
      lambda: |-
        id(cost_month) = id(cost_total);
        id(usage_month) = id(usage_total);

  - platform: shutdown
    name: 'Shutdown'

binary_sensor:
  - platform: template
    name: 'Power Status'
    id: power_status_sensor
    device_class: problem
    lambda: return ( id(power_pulse_meter).state >= id(power_problem_level).state);

sensor:
  - platform: homeassistant
    id: ha_price_per_kwh
    entity_id: 'sensor.${ha_price_sensor}'
    on_value:
      lambda: |-
        if (!(isnan(x))) {
          id(price_per_kwh) = x;
          id(update_price_kwh_avg).execute();
        }

  - platform: pulse_meter
    name: 'Power Use'
    id: power_pulse_meter
    unit_of_measurement: 'W'
    state_class: measurement
    device_class: power
    icon: mdi:flash-outline
    accuracy_decimals: 0
    pin: $pulse_pin
    internal_filter_mode: EDGE
    internal_filter: 100ms
    filters:
      - lambda: return x * (60.0f / id(pulse_rate).state ) * 1000.0f;
    total:
      id: power_pulse_total
      on_value:
        script.execute: process_power_script

  - platform: template
    name: 'Usage Total'
    id: usage_total_sensor
    unit_of_measurement: 'kWh'
    icon: mdi:meter-electric
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    update_interval: never

  - platform: template
    name: 'Usage Daily'
    id: usage_day_sensor
    unit_of_measurement: 'kWh'
    icon: mdi:meter-electric
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    update_interval: $update_interval
    lambda: return id(usage_day);

  - platform: template
    name: 'Usage Monthly'
    id: usage_month_sensor
    unit_of_measurement: 'kWh'
    icon: mdi:meter-electric
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    update_interval: $update_interval
    lambda: return id(usage_month);

  - platform: template
    name: 'Cost Now'
    id: cost_now_sensor
    icon: mdi:cash-fast
    accuracy_decimals: 3
    unit_of_measurement: '${currency}/h'
    device_class: monetary
    update_interval: never

  - platform: template
    name: 'kWh Price Average'
    id: kwh_price_average
    icon: mdi:cash-100
    accuracy_decimals: 3
    unit_of_measurement: $currency
    device_class: monetary
    update_interval: never

  - platform: template
    name: 'Cost Total'
    icon: mdi:cash-100
    id: cost_total_sensor
    unit_of_measurement: $currency
    accuracy_decimals: 3
    device_class: monetary
    update_interval: never

  - platform: template
    name: 'Cost Daily'
    icon: mdi:cash-100
    id: cost_day_sensor
    unit_of_measurement: $currency
    accuracy_decimals: 3
    device_class: monetary
    update_interval: $update_interval
    lambda: |-
      if (id(use_kwh_price_average).state) {
        return id(price_kwh_avg) * id(usage_day);
      } else {
        return id(cost_day);
      }

  - platform: template
    name: 'Cost Monthly'
    icon: mdi:cash-100
    id: cost_month_sensor
    unit_of_measurement: $currency
    accuracy_decimals: 3
    device_class: monetary
    update_interval: $update_interval
    lambda: |-
      if (id(use_kwh_price_average).state) {
        return id(price_kwh_avg) * id(usage_month);
      } else {
        return id(cost_month);
      }

  - platform: template
    name: 'Cost Daily Average'
    icon: mdi:cash-100
    id: cost_daily_avg_sensor
    accuracy_decimals: 3
    unit_of_measurement: $currency
    device_class: monetary
    update_interval: $update_interval
    lambda: return id(cost_day_avg);

  - platform: template
    name: 'Usage Daily Average'
    icon: mdi:meter-electric
    id: usage_daily_avg_sensor
    accuracy_decimals: 3
    unit_of_measurement: 'kWh'
    device_class: energy
    update_interval: $update_interval
    lambda: return id(usage_day_avg);

  - platform: template
    name: 'Uptime'
    icon: mdi:timelapse
    id: uptime_sensor
    accuracy_decimals: 3
    unit_of_measurement: 'days'
    update_interval: $update_interval
    lambda: return id(uptime_days);

time:
  - platform: homeassistant
    id: esp_time

interval:
  - interval: 1s
    then:
      lambda: |-
        static uint32_t update_count = 0;
        static uint32_t last_day_of_year = 0;
        static uint32_t last_month = 0;
        auto time = id(esp_time).now();
        if ( time.is_valid() )
        {
          if ( time.day_of_year != last_day_of_year ) {
            if (last_day_of_year != 0) {
              id(op_flag) |= $flag_reset_daily;
            }
            last_day_of_year = time.day_of_year;
          }
          if ( time.month != last_month ) {
            if (last_month != 0) {
              id(op_flag) |= $flag_reset_monthly;
            }
            last_month = time.month;
          }
        }
        if ( id(op_flag) & $flag_reset_total ) {
          //ESP_LOGD("debug", "reset total");
          id(uptime_start) = 0;
          id(uptime_days) = 0;
          id(usage_total) = 0;
          id(cost_total) = 0;
          id(cost_now) = 0;
          update_count = 0;
        }
        if ( id(op_flag) & $flag_reset_daily ) {
          //ESP_LOGD("debug", "reset daily");
          id(usage_day) = 0;
          id(cost_day) = 0;
          update_count = 0;
        }
        if ( id(op_flag) & $flag_reset_monthly ) {
          //ESP_LOGD("debug", "reset monthly");
          id(usage_month) = 0;
          id(cost_month) = 0;
          update_count = 0;
        }
        if ( time.is_valid() ) {
          if (update_count == 0) {
            id(op_flag) |= $flag_update_sensors;
          }
          update_count++;
          if ( update_count >= $internal_interval ) {
            update_count = 0;
          }
          if ( id(op_flag) & $flag_update_sensors ) {
            const float uptime_secs = id(uptime_days) * 60.0f * 60.0f * 24.0f;
            if ( id(uptime_start) == 0 ) {
              id(uptime_start) = time.timestamp - uptime_secs;
            }
            else if ( ( time.timestamp - id(uptime_start) ) > uptime_secs ) {
              id(uptime_days) = (time.timestamp - id(uptime_start)) / 60.0f / 60.0f / 24.0f;
            }
            if (id(uptime_days) < 1) {
              id(usage_day_avg) = id(usage_day);
              id(cost_day_avg) = id(cost_day);
            } else {
              id(usage_day_avg) = id(usage_total) / id(uptime_days);
              id(cost_day_avg) = id(cost_total) / id(uptime_days);
            }
          }
        }
        id(op_flag) = 0;         // making sure the flag operations are one-shot

script:
  - id: update_price_kwh_avg
    mode: single
    then:
      lambda: |-
        static int count = 0;
        if (id(price_kwh_avg) == 0) {
          count = 0;
        }
        count++;
        id(price_kwh_avg) += (id(price_per_kwh) - id(price_kwh_avg)) / count;
        id(kwh_price_average).publish_state(id(price_kwh_avg));

  - id: process_power_script
    mode: single
    then:
      lambda: |-
        static uint32_t last_pulse_ms = 0;
        const uint32_t now = millis();
        const float energy = 1 / id(pulse_rate).state;
        const float cost = energy * id(price_per_kwh);
        
        id(usage_total) += energy;
        id(usage_day) += energy;
        id(usage_month) += energy;
        id(cost_total) += cost;
        id(cost_day) += cost;
        id(cost_month) += cost;

        if ( last_pulse_ms == 0) {
          last_pulse_ms = now;
          return;
        }

        const float delta = (now - last_pulse_ms);
        const float kwh_use = 3.6f * id(pulse_rate).state / delta;
        //ESP_LOGD("debug", "Power: %.6f", kwh_use);

        last_pulse_ms = now;    // remember last pulse milliseconds

        if (id(use_kwh_price_average).state) {
          id(cost_now) = kwh_use * id(price_kwh_avg);
        } else {
          id(cost_now) = kwh_use * id(price_per_kwh);
        }
        // publish states to the sensors we want 'live' updates on (the rest can wait for the update_interval)
        id(cost_now_sensor).publish_state(id(cost_now));
        id(usage_total_sensor).publish_state(id(usage_total));

        if (id(use_kwh_price_average).state) {
          id(cost_total_sensor).publish_state( id(price_kwh_avg) * id(usage_total));
        } else {
          id(cost_total_sensor).publish_state(id(cost_total));
        }

        // if LED is on, set the color
        if (id(power_led).current_values.is_on()) {
          id(set_power_led_script).execute();
        }

  - id: set_power_led_script
    mode: restart
    then:
      lambda: |-
        const float s = 1.0;    // saturation (purity). [0-1]
        const float v = 0.5;    // brightness. [0-1]
        int i;
        float r, g, b, f, h, p, q, t;
        f = id(power_pulse_meter).state * 100 / id(power_problem_level).state;
        if (f < 100) {
          h = 130 - f;    // orange to green
        } else {
          f -= 100;
          if (f == 0) {
            h = 0;        // red
          } else if (f > 120) {
            h = 300;      // purple
          } else {
            h = 360 - ceil(f / 2.0);  // red to purple
          }
        }
        h /= 60;   // sector 0 to 5
        i = floor(h);
        f = h - i;
        p = v * ( 1 - s );
        q = v * ( 1 - s * f );
        t = v * ( 1 - s * ( 1 - f ) );
        switch( i ) {
          case 0:
            r = v;
            g = t;
            b = p;
            break;
          case 1:
            r = q;
            g = v;
            b = p;
            break;
          case 2:
            r = p;
            g = v;
            b = t;
            break;
          case 3:
            r = p;
            g = q;
            b = v;
            break;
          case 4:
            r = t;
            g = p;
            b = v;
            break;
          default:
            r = v;
            g = p;
            b = q;
            break;
        }
        auto call = id(power_led).turn_on();
        //call.set_brightness(0.4);
        call.set_rgb(r, g, b);
        call.perform();

